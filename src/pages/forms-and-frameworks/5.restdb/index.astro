---
import SlideLayout from "../../../layouts/SlideLayout.astro"
import codeFetcher from "../../../js/codeFetcher";
import Code from "../../../components/Code.astro";
import Explainer from "../../../components/Explainer.svelte";
import AgendaSection from "../../../components/AgendaSection.astro";
import Goal from "../../../components/Goal.astro";
const snippets = await codeFetcher("forms-and-frameworks/5.restdb",[
    "restdb-fetch-delete.js",
    "restdb-fetch-post.js",
    "restdb-fetch-put.js",
    "restdb-fetch-with-headers.js",
])
---

<SlideLayout title="RestDB">
    <AgendaSection header="RestDB" />
    <section>
        <Goal>
            <ol>
                <li>Know what the 4 HTTP methods GET, POST, PUT &amp; DELETE does</li>
                <li>Know how to use them</li>
                <li>Be damn excited about what's to come</li>
            </ol>
        </Goal>
    </section>
   
   <AgendaSection header="What is RestDB">
    <section class="left">
        <h3>what is it?</h3>
        <ul>
        <li>restdb.io is a REST-based database service</li>
        <li>restdb is what's known as a NOSQL database</li>
        <li>But essentially, it's just a JSON storage where you define your data structure</li>
        <li>They also have a few other cool services, like integrating login with SO-ME, e-mails etc</li>
        </ul>
    </section>
    <section>
        <h3>Vocabulary</h3>
        <dl>
        <dt>collection</dt>
        <dd>"a collection of data with the same format", like persons, skills, invoices etc</dd>
        <dt>fields</dt>
        <dd>The individual properties on a collection</dd>
        <dt>relation</dt>
        <dd>A relationship between two collections</dd>
        </dl>
    </section>
    <section>
        <h3>relationships</h3>
        <ol>
        <li>Select one X</li>
        <li>Select many X</li>
        <li>Child list of X</li>
        <li>Storing stuff as JSON</li>
        </ol>
        <p>Lets draw some relations</p>
        <p><small>Relations are hard, and not required</small></p>
    </section>
  
    <section>
        <h3>Endpoints</h3>
        <p>Each collection has it's own endpoint listed under "settings"</p>
        <img data-src="/assets/forms-and-frameworks/5.restdb/endpoint.png" alt="">
        <p>That's almost all we need to replicate what we did on second semester</p>
    </section>
  
    <section>
        <h3>Authentication</h3>
        <p>restdb does not allow CORS requests</p>
        <p>We need to set up a "CORS key"</p>
        <ol>
        <li>clik settings <br><img data-src="/assets/forms-and-frameworks/5.restdb/settings.png" alt=""></li>
        <li>Then API</li>
        <li>Then add a new "Web page API keys (CORS)"</li>
        </ol>
        <p>You can setup restrictions on which domains can access the ressource, for now we can go with *</p>
    </section>
    <section>
        <h3>A brief note on HTTPS</h3>
        <p>Most services should use HTTPS by now, but some don't</p>
        <p>A document served through HTTP can use ressources served as HTTPS, but the other way round is a no-go</p>
        <p>You can enable HTTPS (or SSL) on most webhosts for free</p>
    </section>
  </AgendaSection>
  <section>
    <h3>Asking for data</h3>
    <p><a href="https://restdb.io/docs/querying-with-the-api">https://restdb.io/docs/querying-with-the-api</a></p>
  </section>
<AgendaSection header="<code>GET</code>">
    <section>
        <h3>Sending the API key and our first REST request</h3>
        <Code language="javascript" code={snippets["restdb-fetch-with-headers.js"]} />
        <p>Let's take a look</p>
    </section>
    <section>
        <h1>Exercise #1</h1>
        <iframe src="https://jonasholbech.github.io/stopwatch-react/?transparent=true&time=1200" width="300" height="400"></iframe>
    </section>
    <section>
        <ol>
            <li>Login to <a href="https://restdb.io">restdb.io</a></li>
            <li>Create a "collection" modelling something e.g.
                <ul>
                    <li>Friends?</li>
                    <li>Bands</li>
                    <li>Cars</li>
                </ul>
            </li>
            <li>Add a few rows/entries</li>
            <li>Create a CORS key</li>
            <li>Create a function called <code>get</code> that <code>fetch</code>'es some data from the collection (the console is fine, a &lt;template&gt; is better)</li>
            <li>Call your function, from the script or from the console</li>
        </ol>
    </section>
    <section>
        <h2>Demonstration #1</h2>
        <p>?</p>
    </section>
</AgendaSection>

<AgendaSection header="<code>POST</code>">
    <section>
    
    <p>This is how we POST (save) data to restdb</p>
    <Code stretch language="javascript" code={snippets["restdb-fetch-post.js"]} />
  </section>
    <section>
        <h1>Exercise #2</h1>
        <iframe src="https://jonasholbech.github.io/stopwatch-react/?transparent=true&time=1200" width="300" height="400"></iframe>
    </section>
    
    <section>
        <ol>
            <li>Create a function called <code>post()</code> that POST's an entry to your collection</li>
            <li>Call it either in your script or from the console</li>
            <li>Then call your function <code>get()</code> again to get the new data</li>
            <li>If you can make the <code>post</code> function accept arguments (what it should store), that would be amazing</li>
        </ol>
        <p><small>What do you get back when you call the function <code>post()</code>?</small></p>
    </section>
    <section>
        <h2>Demonstration #2</h2>
        <p>?</p>
        <p>Optimistic inserts</p>
    </section>
</AgendaSection>

<AgendaSection header="<code>DELETE</code>">
    <section>
        <Code language="javascript" code={snippets["restdb-fetch-delete.js"]} />
    </section>
    <section>
        <h1>Exercise #3</h1>
        <iframe src="https://jonasholbech.github.io/stopwatch-react/?transparent=true&time=1200" width="300" height="400"></iframe>
    </section>
    
    <section>
        <ol>
            <li>Create a function called <code>deleteIt(id)</code> that</li>
            <li>receives an id</li>
            <li>and sends a request to delete the entry with the given id</li>
            <li>Then call the function <code>get()</code> again to refresh your data</li>
        </ol>
        <p><small>What do you get back when you call the function <code>deleteIt(id)</code>?</small></p>
        <p>How can we avoid calling <code>get()</code> again?</p>
    </section>
    <section>
        <h2>Demonstration #3</h2>
        <p>?</p>
    </section>
</AgendaSection>

<AgendaSection header="<code>PUT</code>">
    <section>
    <Code language="javascript" code={snippets["restdb-fetch-put.js"]} />
  </section>
    <section>
        <h1>Exercise #4</h1>
        <iframe src="https://jonasholbech.github.io/stopwatch-react/?transparent=true&time=1200" width="300" height="400"></iframe>
    </section>
  
  <section>
    <ol>
        <li>Guess, what, create a function called <code>put()</code></li>
        <li>That sends a request to update an entry</li>
        <li>Optional: make the function accept arguments so it knows what to update</li>
        <li>Figure out which function to call once stuff is updated</li>
        <li>Call the function <code>put</code> from your script or the terminal</li>
    </ol>
    <p><small>As before, do we really need to call that function?</small></p>
  </section>
  <section>
    <h2>Demonstration #4</h2>
    <p>?</p>
    </section>
</AgendaSection>
    <section>
        <p>If we have the time: Insomnia</p>
    </section>
    <AgendaSection header="Let's revisit the goals" />
</SlideLayout>