---
import SlideLayout from "../../../layouts/SlideLayout.astro"
import Goal from "../../../components/Goal.astro"
import AgendaSection from "../../../components/AgendaSection.astro"
import Explainer from "../../../components/Explainer.svelte"
import codeFetcher from "../../../js/codeFetcher";
import Code from "../../../components/Code.astro";

const snippets = await codeFetcher("react/5.pagination",[
    "useEffect-syntax-basic.js",
    "useEffect-syntax-full.js",
    "conditional-rendering-short-circuit.js",
    "conditional-rendering-single-return.js",
    "conditional-rendering-ternary.js",
])

---

<SlideLayout title="Pagination">
    <section>
        <h1>React</h1>
        <img src='/assets/react/0.need-to-know-js/react.png'  alt="" />
    </section>
    <Goal>
        <ol>
            <li>Learn to fetch data</li>
            <li>Understand why <code>fetch</code> behaves differently</li>
            <li>Understand the <code>useEffect</code> hook and it's dependencies</li>
            <li>Utilize conditional rendering</li>
        </ol>
    </Goal>

    <section>
        <h3>Agenda</h3>
        <ol>
            <li><code>useEffect</code> #1
                <ul>
                    <li>Do things once</li>
                    <li>fetch data</li>
                </ul>
            </li>
            <li>Conditional rendering</li>
            <li><code>useEffect</code> #2
                <ul>
                    <li>dependencies array</li>
                </ul>
            </li>
            <li>Case: pagination</li>
        </ol>
    </section>

    <AgendaSection header="<code>useEffect</code> #1">
        <section>
            <p>...and how to avoid an infinite loop</p>
        </section>
        <section>
            <h3>The problem</h3>
            <ol>
                <li>We would like to fetch some data, right?</li>
                <li class="fragment">That data should go in state, so we can utilize React properly</li>
                <li class="fragment">But what happens when state is updated? React re-renders, meaning, we go back to 1, which in turn...</li>
            </ol>
            <p class="fragment">So now we have an infinite loop</p>
        </section>
        <section>
            <h3>The Solution</h3>
            <ol>
                <li>We need to tell React to do a thing ONCE</li>
                <li>That's what the "hook" <code>useEffect</code> is for</li>
                <li><a href="https://reactjs.org/docs/hooks-effect.html">https://reactjs.org/docs/hooks-effect.html</a></li>
            </ol>
            <blockquote>
                Data fetching, setting up a subscription, and manually changing the DOM in
                React components are all examples of side effects. Whether or not you’re
                used to calling these operations “side effects” (or just “effects”), ...
            </blockquote>
        </section>
        <section>
            <h3>The Syntax</h3>
            <Code stretch code={snippets["useEffect-syntax-basic.js"]} language="jsx" />
            <div class="fragment">
                <Explainer client:only data={[
                    {
                        type:"text",
                        x:70,
                        y:40,
                        text:"We import useEffect"
                    },
                    {
                        type:"arrow",
                        d:"M190,50 L220,80"
                    },
                    {
                        type:"text",
                        x:70,
                        y:300,
                        text:"The function to run"
                    },
                    {
                        type:"arrow",
                        d:"M160,280 L230,220"
                    },
                    {
                        type:"text",
                        x:370,
                        y:290,
                        text:"Every time any avariable in this array changes"
                    },
                    {
                        type:"arrow",
                        d:"M460,270 L440,220"
                    },
                ]} />
            </div>
            <p class="fragment" style="transform: translateY(200px)">
                Which means, we often use an empty <code>dependencies</code> array
            </p>
    </section>
    <section>
        <h3>Full example</h3>
        <Code stretch code={snippets["useEffect-syntax-full.js"]} language="jsx" />
        <div class="fragment">
            <Explainer client:only data={[
                {
                    type:"text",
                    x:629,
                    y:227,
                    text:"We create a state, and set it to []"
                },
                {
                    type:"arrow",
                    d:"M623,220 L600,210"
                },

                {
                    type:"text",
                    x:505,
                    y:269,
                    text:"use an arrow function for the callback"
                },
                {
                    type:"arrow",
                    d:"M495,263 L370,250"
                },

                {
                    type:"text",
                    x:315,
                    y:400,
                    text:"set state, which will trigger the render again"
                },
                {
                    type:"arrow",
                    d:"M310,394 L300,380"
                },

                {
                    type:"text",
                    x:580,
                    y:500,
                    text:"This one is automatic"
                },
                {
                    type:"arrow",
                    d:"M570,500 L520,510"
                },
            ]} />
        </div>
        </section>
    </AgendaSection>
    
    <AgendaSection header="Conditional rendering">
        <section>
            <ul>
                <li>
                We (I) call it "conditional rendering" when we render stuff based on
                conditions
                </li>
                <li>We have a few options, let's highlight three common patterns</li>
            </ul>
        </section>
        <section>
            <h3>Single return</h3>
            <p>Remember what <code>return</code> does in a function?</p>
            <p>
                It, surprise, returns something, AND stops the function from proceeding
            </p>
            <p>So, once we return, nothing else happens, we can use that</p>
            <Code code={snippets["conditional-rendering-single-return.js"]} language="jsx" />
        </section>
        <section>
            <h3>Short Circuit Evaluation</h3>
            <ul>
                <li>
                If statements are read from left to right, the moment JS figures out
                that something can not be true, it stops
                </li>
                <li>
                React won't render <code>null</code>, <code>undefined</code> and
                <code>[]</code> (empty arrays)
                </li>
            </ul>
            <Code code={snippets["conditional-rendering-short-circuit.js"]} language="jsx" />
        </section>
        <section>
            <h3>Ternary operator</h3>
            <pre><code class="js">const result = condition ? ifTrue : ifFalse</code></pre>
            <p>The ternary operator is commonly used for minor stuff</p>
            <Code code={snippets["conditional-rendering-ternary.js"]} language="jsx" />
        </section>
    </AgendaSection>

    <AgendaSection header="<code>useEffect</code> #2">
    
    </AgendaSection>

    

    <AgendaSection header="Case: pagination">
    
    </AgendaSection>

    <AgendaSection header="+3/4">
        <section>
            <ul>
                <li>read https://dmitripavlutin.com/react-useeffect-explanation/</li>
            </ul>
        </section>
    </AgendaSection>
</SlideLayout>
