---
import SlideLayout from "../../../layouts/SlideLayout.astro"
import codeFetcher from "../../../js/codeFetcher";
import Code from "../../../components/Code.astro";
import Explainer from "../../../components/Explainer.svelte";
const snippets = await codeFetcher("t7/6.conditionally-showing-data",[
    "if-quiz1.js",
    "if-quiz2.js",
    "discount1.js",
    "discount2.js",
    "navigationhelpers.js",
    "qs-template.html",
    "querySelector.js",
    "querySelectorAll.js",
    "elem.nextElementSibling.js",
    "elem.parentElement.js"
])

---

<SlideLayout title="Conditionally showing data">
<section>
  <h2>Dom manipulation</h2>
  <h3>Conditionally showing data</h3>
</section>

<section>
  <h2>Agenda</h2>
  <ul>
    <li>Navigating the DOM</li>
    <li>Attributes</li>
    <li>Arrays / <code>.querySelectorAll</code></li>
    <li>Removing content</li>
    <li>Conditional data</li>
    <li>Data attributes</li>
    <li><code>productlist.html</code>, #1</li>
  </ul>
</section>

<section>
  <h3>Purpose of today</h3>
  <p><strong>Navigating and controlling the DOM, remember</strong></p>
  <p class="fragment">We can find ANYTHING in the DOM</p>
  <p class="fragment">We can create ANYTHING in the DOM</p>
  <p class="fragment">We can modify ANYTHING in the DOM</p>

</section>
<section>
  <section>
    <h1>Navigating the DOM</h1>
  </section>
  <section>
    <h4>Locating an element</h4>
    <Code code={snippets["navigationhelpers.js"]} lineNumbers="1-3|5-7|9-10|12-13|15-16"/>
  </section>

  <section class="small">
    <h4><code>elem.querySelector</code></h4>
    <p>With something selected, we can search through it's children</p>
    <Code code={snippets["qs-template.html"]} />
    <Code code={snippets["querySelector.js"]} />
  </section>

  <section class="small">
    <h4><code>elem.querySelectorAll</code></h4>
    <Code code={snippets["qs-template.html"]} />
    <Code code={snippets["querySelectorAll.js"]} />
    <p>This one is a bit harder, we'll get back to it</p>
  </section>

  <section class="small">
    <h4><code>elem.parentElement</code></h4>
    <Code code={snippets["qs-template.html"]} />
    <Code code={snippets["elem.parentElement.js"]} />
  </section>

  <section class="small">
    <h4><code>elem.nextElementSibling</code></h4>
    <Code code={snippets["qs-template.html"]} />
    <Code code={snippets["elem.nextElementSibling.js"]} />
  </section>

  <section class="small">
    <h4>Chaining</h4>
    <p>We often see these elements used "chained"</p>
    <pre><code class="js" data-source="6/chaining.js"></code></pre>
  </section>

</section>
<section>
  <section>
    <h1>Attributes</h1>
  </section>
  <section>
    <h3><code>setAttribute</code></h3>
    <p>With <code>elem.setAttribute('atr', 'new')</code> we can set the "attributes" on any element in the DOM</p>

    <pre><code class="js" data-source="6/setAttribute.js"></code></pre>
  <p><small>we have changed attributes with <code>.src</code> which works just fine</small></p>
  </section>
  <section>
    <h3><code>getAttribute</code></h3>
    <p>We can also "read" attributes</p>

    <pre><code class="js" data-source="6/getAttribute.js"></code></pre>
    <p><small>We could also read the src with <code>.src</code> but it behaves strange</small></p>
  </section>
</section>
<section>
  <section>
    <h1>Arrays</h1>
    <p>Well, actually, <code>NodeList</code>s</p>
  </section>
  <section>
    <ul>
      <li>Arrays are still a bit hard</li>
      <li>But oh so useful</li>
      <li><code>.querySelectorAll()</code> gives us a NodeList</li>
      <li>Which works almost like an array</li>
      <li>e.g. we can use <code>forEach</code></li>
    </ul>
  </section>

  <section>
    <h5><code>forEach</code> with named functions</h5>
    <pre><code class="js" data-source="6/qsForEach.js"></code></pre>

  </section>

  <section>
    <h5><code>forEach</code> with arrow functions</h5>
    <pre><code class="js" data-source="6/qsForEachArrow.js"></code></pre>
  </section>

  <section>
    <h5><code>forEach</code> with arrow functions, condensed</h5>
    <pre><code class="js" data-source="6/qsForEachArrowCondensed.js"></code></pre>
  </section>

</section>
<section>
  <h2>Removing content</h2>
  <p>One of the easier ones :-)</p>
  <pre><code>elem.remove()</code></pre>

  <h3>Removing some &lt;div&gt;</h3>
  <pre><code>const div = document.querySelector("div");
div.remove();
//or just
document.querySelector("div").remove()
</code></pre>
</section>

<section>
  <section>
    <h1>Exercise</h1>
    <p>Fronter: 1. DOM Manipulation</p>
    <p>You get 20 minutes, finish the rest as homework</p>
  </section>
  <section>
    <p>A quick look at the exercise</p>
    <p>Remember, you can discuss this on Teams</p>
  </section>
</section>
<section>
  <section>
    <h1>Conditional data?</h1>
  </section>
  <section>
    <p>What's that?</p>
  </section>
  <section>
    <p>Non-static sites are full of it.</p>
    <p>if you're logged in, you see one thing, otherwise you see something else</p>
    <p>Based on your actions on a site, things can change</p>
    <p>Some products are sold out, some are discontinued etc</p>
    <p>&nbsp;</p>
    <p>Designing for these circumstances require a little thought</p>
  </section>

  <section>
    <h3>Technical Approaches</h3>
    <ol>
      <li>Have the DOM element in your template, and hide it if you do not need it</li>
      <li class="fragment">Have the DOM element, hidden in your template, and show it if you need it</li>
      <li class="fragment">Have the DOM element in your template, remove it if you do not need it</li>
      <li class="fragment">Make JS create the element when needed</li>
    </ol>
    <p class="fragment">Is there any difference?</p>
  </section>
</section>

<section>
  <section>
    <h1>Using the cascade</h1>
  </section>
  <section>
    <h3>Remember the C in CSS?</h3>
    <p>If you want to hide/show something, you don't HAVE to put the class on that element, you can use the cascade</p>
    <p>Two versions:</p>
  </section>
  <section>
    <h3>Directly on the element</h3>
    
    <pre><code class="html" data-source="6/useTheCascade.html"></code></pre>
    
    <pre><code class="css" data-source="6/useTheCascade.css"></code></pre>
    
  </section>
  <section>
    <h3>On the parent</h3>
    
    <pre><code class="html" data-source="6/useTheCascade2.html"></code></pre>
    
    <pre><code class="css" data-source="6/useTheCascade2.css"></code></pre>
    
  </section>
</section>
<section>
  <section>
    <h1>Conditions &amp; sample code</h1>
  </section>
  <section><img data-src="https://s-media-cache-ak0.pinimg.com/originals/fc/5d/a3/fc5da380710c56cf174b4e5e0c63feb3.jpg" alt=""></section>
  <section>
    <p>Remember <code>if</code>-statements?</p>
    <div class="col6">
      <Code code={snippets["if-quiz1.js"]} stretch />
    </div>
    <div class="col6">
      <Code code={snippets["if-quiz2.js"]} stretch />
    </div>
    <p>10 minutes, try them out in the console</p>
  </section>

  <section>
    <h2>sample code</h2>
    <p>Hide / show depending on data</p>
    <Code code={snippets["discount1.js"]} />
    <p>Create an element based on data</p>
    <Code code={snippets["discount2.js"]} />
  </section>
</section>
<section>
  <section>
    <h1>Exercise</h1>
    <p><code>productlist.html</code>, first iteration</p>
  </section>
  <section>
    <ol>
      <li>Follow the process in the <a href="https://www.youtube.com/watch?v=eNY6FfgpfgY&list=PLCx1FpZ4Dtb0Qapq6tHOGiAxPeAUGwwk8&index=6">video</a></li>
      <li>This one will be a little harder than the last time, because our DOM's will be very different</li>
      <li>But remember, you can <code>.remove()</code> things in your clone</li>
      <li>And use all the other cool methods for navigating the DOM inside your clones</li>
    </ol>
  </section>
</section>
</SlideLayout>